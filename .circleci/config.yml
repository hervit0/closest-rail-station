# Scala CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/sample-config/ for more details
#

version: 2
jobs:
  buildJob:
    docker:
      - image: circleci/openjdk:8-jdk
      - image: circleci/dynamodb
        environment:
          AWS_ACCESS_KEY_ID: test_id
          AWS_SECRET_ACCESS_KEY: test_key
          AWS_DEFAULT_REGION: us-west-2
    working_directory: ~/repo
    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb
      CODECOV_TOKEN: 13710bed-2a74-4db2-b00b-e496d7967926
    steps:
      - checkout
      - run:
          name: "Wait for test dynamoDB starting"
          command: dockerize -wait tcp://127.0.0.1:8000 -timeout 120s
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.sbt" }}
            - v1-dependencies-
      - run: cat /dev/null | sbt test:compile
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies--{{ checksum "build.sbt" }}
      - run:
          name: "Run unit tests"
          command: cat /dev/null | sbt test:test
      - store_test_results:
          path: target/testReports
      - run:
          name: "Run linter"
          command: sbt scalafmtCheck
      - run:
          name: "Run coverage report"
          command: |
            sbt clean coverage test coverageReport
            bash <(curl -s https://codecov.io/bash)
      - run:
          name: "Package the application"
          command: |
            mkdir -p packagingWorkspace
            sbt assembly
            cp target/scala-2.12/hello.jar ./packagingWorkspace/hello.jar
            cp serverless.yml ./packagingWorkspace/serverless.yml
      - store_artifacts:
          path: target/scala-2.12/hello.jar
      - persist_to_workspace:
          root: packagingWorkspace
          paths: .
      - run:
          name: "Seed Database"
          command: sbt run
  deployJob:
    docker:
      - image: circleci/node:8.10
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: ./packagingWorkspace
      - run:
          name: "Install Serverless CLI"
          command: |
            sudo npm i -g serverless
      - run:
          name: "Deploy the application"
          command: |
            cp ./packagingWorkspace/* .
            export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
            export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
            serverless deploy --verbose

workflows:
  version: 2
  shipWorkflow:
    jobs:
      - buildJob
      - deployJob:
          filters:
            branches:
              only: master
          requires:
            - buildJob
